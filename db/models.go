// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AuthTypeT string

const (
	AuthTypeTGoogle AuthTypeT = "Google"
	AuthTypeTGithub AuthTypeT = "Github"
	AuthTypeTEmail  AuthTypeT = "Email"
)

func (e *AuthTypeT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthTypeT(s)
	case string:
		*e = AuthTypeT(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthTypeT: %T", src)
	}
	return nil
}

type NullAuthTypeT struct {
	AuthTypeT AuthTypeT
	Valid     bool // Valid is true if AuthTypeT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthTypeT) Scan(value interface{}) error {
	if value == nil {
		ns.AuthTypeT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthTypeT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthTypeT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthTypeT), nil
}

type Question struct {
	ID         int32
	Body       string
	DriverCode pgtype.Text
	Email      string
}

type Submission struct {
	ID         int32
	Code       string
	QuestionID int32
	Message    string
	Correct    bool
	Language   string
	Duration   int64
	Email      string
}

type Testcase struct {
	ID     int32
	Input  string
	Output string
	Order  int32
	Qid    int32
	Email  string
}

type User struct {
	ID       int32
	Username string
	Password string
	Name     string
	Email    string
	Picture  string
	AuthType AuthTypeT
}
